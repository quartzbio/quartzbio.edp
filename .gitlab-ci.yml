default:
  tags: [docker]
  image: rocker/verse:4.4
before_script:
  - echo "options(crayon.enabled=TRUE);" >> .Rprofile
  - echo 'options(repos = c(RSPM = "https://p3m.dev/cran/__linux__/noble/latest", CRAN = "https://p3m.dev/cran/latest"));' >> .Rprofile
  - lsb_release -c
  - R -e "sessionInfo()"
  - if [[ $CI_DEFAULT_BRANCH == "master" || $CI_DEFAULT_BRANCH = "main" ]]; then echo "OK - Default branch is master or main"; else echo "Default branch is not master or main; please add yours ($CI_DEFAULT_BRANCH) where needed, as well as in the present line of code" ; exit 1; fi
  - echo "Library path for packages :" $R_LIBS_USER
  - mkdir -p $R_LIBS_USER
  - Rscript -e 'Sys.getenv("R_LIBS_USER");dir.exists(Sys.getenv("R_LIBS_USER"))'
  - Rscript -e 'Sys.getenv("R_LIBS")'
  - Rscript -e '.libPaths()'
  - Rscript -e 'if(!requireNamespace("pak", quietly = TRUE)) {install.packages("pak")}'


variables:
  GIT_DEPTH: 10
  R_LIBS: ${CI_PROJECT_DIR}/ci/lib:${R_LIBS}
  R_LIBS_USER: ${CI_PROJECT_DIR}/ci/lib

cache:
  - key: cache-default
    paths:
      - ${R_LIBS_USER}

stages:
  - build
  - test
  - lintr
  - build_vignettes
  - document_package

building:
  stage: build
  needs: []
  # hack from https://stackoverflow.com/a/65864572 to run only once when MR is open
  # by default all jobs would be executed twice
  rules:
    - if: '$CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE == "push" && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - when: always
  script:
    - Rscript -e 'pak::pak(pkg = ".", upgrade = TRUE, dependencies = TRUE)'
    - Rscript -e 'pak::pkg_install(pkg = "rcmdcheck", upgrade = TRUE)'
# tests will be executed in the next stage
    - R -e 'rcmdcheck::rcmdcheck(args = c("--no-manual", "--no-tests", "--as-cran"), error_on = "warning", check_dir = "check")'
  artifacts:
    paths:
      - check
    expire_in: 30 days

coverage:
  stage: test
  needs: []
  rules:
    - if: '$CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE == "push" && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - when: always
  allow_failure: true
  when: on_success
  script:
    - Rscript -e 'pak::pak(pkg = ".", upgrade = TRUE, dependencies = TRUE)'
    - Rscript -e 'pak::pkg_install(pkg = c("covr", "DT"), upgrade = TRUE)'
    - Rscript -e 'options(crayon.enabled=FALSE); covr::gitlab(quiet = FALSE)' # crayon is disabled as it causes issues with coverage reading
    - Rscript -e 'covr::to_cobertura(covr::package_coverage(), "coverage.xml")'
  coverage: '/Coverage: \d+\.\d+/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

lintr:
  stage: lintr
  needs: []
  rules:
    - if: '$CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE == "push" && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - when: always
  script:
    - Rscript -e 'pak::pkg_install(".", upgrade = TRUE)'
    - Rscript -e 'pak::pkg_install("lintr", upgrade = TRUE); print(paste("lintr version:", packageVersion("lintr")))'
    - Rscript -e 'Sys.setenv("LINTR_ERROR_ON_LINT" = TRUE); lintr::lint_package()'

build_vignettes:
  stage: build_vignettes
  needs: []
  rules:
    - if: '$CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE == "push" && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - when: always
  script:
    - Rscript -e 'pak::pkg_install(pkg = "devtools", upgrade = TRUE)'
    - R -q --vanilla -e 'devtools::build_vignettes()'

document_package:
  stage: document_package
  needs: []
  rules:
    - if: '$CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE == "push" && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - when: always
  script:
    - Rscript -e 'pak::local_install_deps(root = ".")'
    - Rscript -e 'pak::pkg_install(pkg = "roxygen2", upgrade = TRUE)'
    - R -q --vanilla -e 'roxygen2::roxygenize()'
